app.routes.ts - "import { Routes } from '@angular/router';
import { ComponentOneComponent } from './components/component-one/component-one.component';
import { ComponentTwoComponent } from './components/component-two/component-two.component';

export const routes: Routes = [
    {path: 'one', component: ComponentOneComponent},
    {path: 'two', component: ComponentTwoComponent},
];
",

app.component.html - "<div>{{ message }}</div>
<div>Message from Child :{{ messageFromChild }}</div>

<app-student
  [parentMessage]="messageToChild"
  (childMessageEvent)="receiveMessage($event)"
></app-student>

<div style="border: 1px solid black; padding: 6px">
  <a routerLink="/one" routerLinkActive="active" ariaCurrentWhenActive="page"
    >Component One</a
  >
  <br />
  <a routerLink="/two" routerLinkActive="active" ariaCurrentWhenActive="page"
    >Component Two</a
  >
  <router-outlet></router-outlet>
</div>
",

app.component.ts - "import { Component } from '@angular/core';
import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';
import { StudentComponent } from './components/student/student.component';
import {HttpClientJsonpModule, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';
import { ComponentOneComponent } from './components/component-one/component-one.component';
import { ComponentTwoComponent } from './components/component-two/component-two.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, StudentComponent, CommonModule, ComponentOneComponent, ComponentTwoComponent, RouterOutlet, RouterLink, RouterLinkActive],
  providers: [],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
  
})
export class AppComponent {
  message: string = 'Hello, Angular!';
  messageToChild: string = 'Hello, Child Component!';
  messageFromChild: string | undefined;

  receiveMessage($event: string | undefined) {
    this.messageFromChild = $event;
    console.log("recieved message from child: " + $event);
  }
}
",
data.service.ts - "// data.service.ts
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class DataService {
  private messageSubject = new Subject<string>();
  message$ = this.messageSubject.asObservable();

  sendMessage(message: string) {
    this.messageSubject.next(message);
  }
}
",
api.service.ts - "import { Component, Injectable, NgModule, inject } from '@angular/core';
import { HttpClient, HttpClientModule, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../../environments/environment.development';

@Injectable({
  providedIn: 'root',
})

export class ApiService {
  private apiUrl: string = environment.apiUrl; 

  constructor(private http: HttpClient) {}
  // GET request
  get(endpoint: string): Observable<any> {
    const url = `${this.apiUrl}/${endpoint}`;
    return this.http.get(url);
  }

  // POST request with headers
  post(endpoint: string, data: any): Observable<any> {
    const url = `${this.apiUrl}/${endpoint}`;
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.post(url, data, { headers });
  }

  // PUT request
  put(endpoint: string, data: any): Observable<any> {
    const url = `${this.apiUrl}/${endpoint}`;
    return this.http.put(url, data);
  }

  // DELETE request
  delete(endpoint: string): Observable<any> {
    const url = `${this.apiUrl}/${endpoint}`;
    return this.http.delete(url);
  }
}
", student component - "<!-- student.component.html -->
<p>{{ parentMessage }}</p>
<div
  style="
    display: flex;
    justify-content: center;
    align-items: center;
    padding-top: 1vw;
  "
>
  <mat-table [dataSource]="dataSource" class="mat-elevation-z8">
    <ng-container matColumnDef="id">
      <mat-header-cell *matHeaderCellDef>ID</mat-header-cell>
      <mat-cell *matCellDef="let student">{{ student.id }}</mat-cell>
    </ng-container>

    <ng-container matColumnDef="name">
      <mat-header-cell *matHeaderCellDef>Name</mat-header-cell>
      <mat-cell *matCellDef="let student">{{ student.name }}</mat-cell>
    </ng-container>

    <ng-container matColumnDef="dateOfBirth">
      <mat-header-cell *matHeaderCellDef>Date of Birth</mat-header-cell>
      <mat-cell *matCellDef="let student">{{
        student.dateOfBirth | date : "short"
      }}</mat-cell>
    </ng-container>

    <ng-container matColumnDef="average">
      <mat-header-cell *matHeaderCellDef>Average</mat-header-cell>
      <mat-cell *matCellDef="let student">{{ student.average }}</mat-cell>
    </ng-container>

    <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>
    <mat-row *matRowDef="let row; columns: displayedColumns"></mat-row>
  </mat-table>
  <mat-divider></mat-divider>
</div>
<div
  style="
    display: flex;
    justify-content: center;
    align-items: center;
    padding-top: 1vw;
  "
>
  <button mat-raised-button color="primary" (click)="sendMessage()">Child to Parent Emit</button>
</div>
", "import { Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';
import { ApiService } from '../../services/api/api.service';
import { HttpClientModule } from '@angular/common/http';
import { DatePipe, NgFor } from '@angular/common';
import {MatTableDataSource, MatTableModule} from '@angular/material/table';
import { MatButton, MatButtonModule, MatFabButton } from '@angular/material/button';
import {MatDividerModule} from '@angular/material/divider';



@Component({
  selector: 'app-student',
  standalone: true,
  imports: [HttpClientModule, NgFor, DatePipe, MatTableModule, MatButtonModule, MatDividerModule],
  providers : [ApiService],
  templateUrl: './student.component.html',
  styleUrl: './student.component.css',
})

export class StudentComponent implements OnInit {
  @Input() parentMessage: string | undefined;
  @Output() childMessageEvent = new EventEmitter<string>();

  sendMessage() {
    this.childMessageEvent.emit('Hello from Child!');
    console.log('Sent message to parent');
  }
  students: any[] = [];
  displayedColumns: string[] = ['id', 'name', 'dateOfBirth', 'average'];
  dataSource: MatTableDataSource<any>;

  constructor(private apiService: ApiService) {
    this.dataSource = new MatTableDataSource(this.students);
  }

  ngOnInit() {
    this.apiService.get('students').subscribe(
      (response) => {
        this.students = response;
        this.dataSource.data = this.students;
      },
      (error) => {
        console.error('Error fetching data:', error);
      }
    );
  }
}", component one - "<h3>Component Two</h3>
<p>{{ receivedMessage }}</p>",
"import { Component } from '@angular/core';
import { DataService } from '../../services/data/data.service';
import { MatButtonModule } from '@angular/material/button';

@Component({
  selector: 'app-component-one',
  standalone: true,
  imports: [MatButtonModule],
  providers: [DataService],
  templateUrl: './component-one.component.html',
  styleUrl: './component-one.component.css'
})
export class ComponentOneComponent {

  constructor(private dataService: DataService) {}



 
  ngOnInit() {
    this.dataService.sendMessage('Component One initialized!');
    console.log('Component One initialized!');
  }

}
", 

component two - "<h3>Component Two</h3>
<p>{{ receivedMessage }}</p>",
"import { Component, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { DataService } from '../../services/data/data.service';
import { ComponentOneComponent } from '../component-one/component-one.component';

@Component({
  selector: 'app-component-two',
  standalone: true,
  imports: [],
  providers: [DataService],
  templateUrl: './component-two.component.html',
  styleUrl: './component-two.component.css',
})
export class ComponentTwoComponent implements OnInit {
  receivedMessage: string | undefined;
  private subscription: Subscription | undefined;

  constructor(private dataService: DataService) {}

  ngOnInit() {
    this.subscription = this.dataService.message$.subscribe((message) => {
      this.receivedMessage = message;
      console.log('Component Two received message:', this.receivedMessage);
    });
  }

  ngOnDestroy() {
    // Unsubscribe to avoid memory leaks
    this.subscription?.unsubscribe();
  }
}
"
